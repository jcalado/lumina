// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id                    String   @id @default(cuid())
  path                  String   @unique // filesystem path
  slug                  String   // URL-friendly slug (unique within parent context)
  name                  String
  description           String?  // from project.md
  status                Status   @default(PUBLIC) // PUBLIC | PRIVATE
  enabled               Boolean  @default(true)
  syncedToS3            Boolean  @default(false) // All photos uploaded to S3
  localFilesSafeDelete  Boolean  @default(false) // Safe to delete local files
  lastSyncAt            DateTime? // Last successful sync
  syncFingerprint       String?  @db.Text // JSON string of album fingerprint
  lastSyncCheck         DateTime? // Last time sync check was performed
  syncStatus            SyncStatus @default(PENDING) // Current sync status
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  photos                Photo[]
  videos                Video[]

  // Composite unique constraint for path-based uniqueness
  @@unique([path, slug])
  @@map("albums")
}

model Photo {
  id              String      @id @default(cuid())
  albumId         String
  filename        String
  originalPath    String
  s3Key           String
  metadata        String?     @db.Text // EXIF data as JSON string
  fileSize        Int
  takenAt         DateTime?   // from EXIF
  blurhash        String?     // BlurHash for loading placeholder
  faceProcessedAt DateTime?   // Tracks when faces were last processed for this photo
  createdAt       DateTime    @default(now())
  album           Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails      Thumbnail[]
  faces           Face[]

  // Existing indexes
  @@index([albumId])
  @@index([faceProcessedAt])

  // Additional performance optimizations
  @@index([takenAt]) // For time-based photo queries
  @@index([albumId, takenAt]) // For album photos sorted by date
  @@index([faceProcessedAt, albumId]) // For finding unprocessed photos by album

  @@map("photos")
}

model Video {
  id           String      @id @default(cuid())
  albumId      String
  filename     String
  originalPath String
  s3Key        String
  metadata     String?     @db.Text // Video metadata as JSON string
  fileSize     Int
  duration     Float?      // Duration in seconds
  width        Int?        // Video resolution width
  height       Int?        // Video resolution height
  fps          Float?      // Frames per second
  codec        String?     // Video codec
  bitrate      Int?        // Bitrate in bps
  takenAt      DateTime?   // from metadata
  posterFrame  String?     // S3 key for poster frame image
  createdAt    DateTime    @default(now())
  album        Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails   VideoThumbnail[]

  @@index([albumId])
  @@map("videos")
}

model VideoThumbnail {
  id      String        @id @default(cuid())
  videoId String
  size    ThumbnailSize
  s3Key   String
  width   Int
  height  Int
  video   Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, size])
  @@index([videoId])
  @@map("video_thumbnails")
}

model Thumbnail {
  id      String        @id @default(cuid())
  photoId String
  size    ThumbnailSize
  s3Key   String
  width   Int
  height  Int
  photo   Photo         @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([photoId, size])
  @@index([photoId])
  @@map("thumbnails")
}

model SyncJob {
  id              String    @id @default(cuid())
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  albumProgress   String?   @db.Text // JSON with per-album progress
  totalAlbums     Int       @default(0)
  completedAlbums Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   @db.Text // JSON string for error details
  filesProcessed  Int       @default(0)
  filesUploaded   Int       @default(0)
  logs            String?   @db.Text // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("sync_jobs")
}

model BlurhashJob {
  id              String    @id @default(cuid())
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  totalPhotos     Int       @default(0)
  processedPhotos Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   @db.Text // JSON string for error details
  logs            String?   @db.Text // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("blurhash_jobs")
}

model ThumbnailJob {
  id                String    @id @default(cuid())
  status            JobStatus @default(PENDING)
  progress          Int       @default(0)
  totalPhotos       Int       @default(0)
  processedPhotos   Int       @default(0)
  thumbnailsCreated Int       @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  errors            String?   @db.Text // JSON string for error details
  logs              String?   @db.Text // JSON array of detailed log entries
  createdAt         DateTime  @default(now())

  @@map("thumbnail_jobs")
}

model Person {
  id        String   @id @default(cuid())
  name      String?  // Name given by admin, null for unnamed/grouped faces
  confirmed Boolean  @default(false) // Admin confirmed this person grouping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  faces     Face[]

  // Performance optimizations
  @@index([confirmed]) // For filtering confirmed/unconfirmed people
  @@index([name]) // For name-based searches
  @@index([confirmed, updatedAt]) // For sorting confirmed people by recent updates

  @@map("people")
}

model Face {
  id           String  @id @default(cuid())
  photoId      String
  personId     String?
  boundingBox  String  @db.Text // JSON: {x, y, width, height} coordinates for LARGE thumbnail
  confidence   Float   // Detection confidence (0.0 - 1.0)
  embedding    String? @db.Text // Face encoding for recognition (JSON array)
  verified     Boolean @default(false) // Admin verified this face belongs to this person
  ignored      Boolean @default(false) // New field: true if face should be ignored
  createdAt    DateTime @default(now())
  photo        Photo   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  person       Person? @relation(fields: [personId], references: [id], onDelete: SetNull)

  // Existing indexes
  @@index([photoId])
  @@index([personId])

  // Performance optimizations for face queries
  @@index([personId, confidence]) // For sorting faces by confidence within a person
  @@index([ignored, personId]) // For finding unassigned/ignored faces efficiently
  @@index([verified]) // For filtering verified faces
  @@index([confidence]) // For confidence-based filtering
  @@index([createdAt]) // For time-based queries
  @@index([personId, verified]) // For finding verified faces per person
  @@index([photoId, ignored]) // For finding faces in a photo excluding ignored ones

  @@index([personId], name: "idx_face_unassigned")
  @@index([embedding], name: "idx_face_has_embedding")
  @@index([ignored], name: "idx_face_not_ignored")

  @@map("faces")
}

model FaceRecognitionJob {
  id                String    @id @default(cuid())
  status            JobStatus @default(PENDING)
  progress          Int       @default(0)
  totalPhotos       Int       @default(0)
  processedPhotos   Int       @default(0)
  facesDetected     Int       @default(0)
  facesMatched      Int       @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  pausedAt          DateTime?
  errors            String?   @db.Text // JSON string for error details
  logs              String?   @db.Text // JSON array of detailed log entries
  createdAt         DateTime  @default(now())

  @@map("face_recognition_jobs")
}

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String    // bcrypt hashed
  role      AdminRole @default(ADMIN)
  enabled   Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?   // ID of admin who created this user
  creator   AdminUser? @relation("AdminUserCreatedBy", fields: [createdBy], references: [id])
  created   AdminUser[] @relation("AdminUserCreatedBy")

  @@map("admin_users")
}

enum Status {
  PUBLIC
  PRIVATE
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SYNCED
  CHANGED
}

enum ThumbnailSize {
  SMALL  // 300px grid thumbnails
  MEDIUM // 800px preview
  LARGE  // 1200px lightbox
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
