// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id                    String   @id @default(cuid())
  path                  String   @unique // filesystem path
  slug                  String   // URL-friendly slug (unique within parent context)
  name                  String
  displayOrder          Int      @default(0)
  description           String?  // from project.md
  status                Status   @default(PUBLIC) // PUBLIC | PRIVATE
  enabled               Boolean  @default(true)
  syncedToS3            Boolean  @default(false) // All photos uploaded to S3
  localFilesSafeDelete  Boolean  @default(false) // Safe to delete local files
  lastSyncAt            DateTime? // Last successful sync
  syncFingerprint       String?  @db.Text // JSON string of album fingerprint
  lastSyncCheck         DateTime? // Last time sync check was performed
  syncStatus            SyncStatus @default(PENDING) // Current sync status
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  photos                Photo[]
  videos                Video[]

  // Composite unique constraint for path-based uniqueness
  @@unique([path, slug])
  @@map("albums")
}

model Photo {
  id              String      @id @default(cuid())
  albumId         String
  filename        String
  originalPath    String
  s3Key           String
  metadata        String?     @db.Text // EXIF data as JSON string
  fileSize        Int
  takenAt         DateTime?   // from EXIF
  blurhash        String?     // BlurHash for loading placeholder
  createdAt       DateTime    @default(now())
  album           Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails      Thumbnail[]

  // Existing indexes
  @@index([albumId])

  // Additional performance optimizations
  @@index([takenAt]) // For time-based photo queries
  @@index([albumId, takenAt]) // For album photos sorted by date

  @@map("photos")
}

model Video {
  id           String      @id @default(cuid())
  albumId      String
  filename     String
  originalPath String
  s3Key        String
  metadata     String?     @db.Text // Video metadata as JSON string
  fileSize     Int
  duration     Float?      // Duration in seconds
  width        Int?        // Video resolution width
  height       Int?        // Video resolution height
  fps          Float?      // Frames per second
  codec        String?     // Video codec
  bitrate      Int?        // Bitrate in bps
  takenAt      DateTime?   // from metadata
  posterFrame  String?     // S3 key for poster frame image
  createdAt    DateTime    @default(now())
  album        Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails   VideoThumbnail[]

  @@index([albumId])
  @@map("videos")
}

model VideoThumbnail {
  id      String        @id @default(cuid())
  videoId String
  size    ThumbnailSize
  s3Key   String
  width   Int
  height  Int
  video   Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, size])
  @@index([videoId])
  @@map("video_thumbnails")
}

model Thumbnail {
  id      String        @id @default(cuid())
  photoId String
  size    ThumbnailSize
  s3Key   String
  width   Int
  height  Int
  photo   Photo         @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([photoId, size])
  @@index([photoId])
  @@map("thumbnails")
}

model SyncJob {
  id              String    @id @default(cuid())
  type            SyncJobType @default(FILESYSTEM)
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  albumProgress   String?   @db.Text // JSON with per-album progress
  totalAlbums     Int       @default(0)
  completedAlbums Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   @db.Text // JSON string for error details
  filesProcessed  Int       @default(0)
  filesUploaded   Int       @default(0)
  logs            String?   @db.Text // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("sync_jobs")
}

model BlurhashJob {
  id              String    @id @default(cuid())
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  totalPhotos     Int       @default(0)
  processedPhotos Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   @db.Text // JSON string for error details
  logs            String?   @db.Text // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("blurhash_jobs")
}

// ThumbnailJob removed (migrated to BullMQ queues)

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String    // bcrypt hashed
  role      AdminRole @default(ADMIN)
  enabled   Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?   // ID of admin who created this user
  creator   AdminUser? @relation("AdminUserCreatedBy", fields: [createdBy], references: [id])
  created   AdminUser[] @relation("AdminUserCreatedBy")

  @@map("admin_users")
}

enum Status {
  PUBLIC
  PRIVATE
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SYNCED
  CHANGED
}

enum ThumbnailSize {
  SMALL  // 300px grid thumbnails
  MEDIUM // 800px preview
  LARGE  // 1200px lightbox
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum SyncJobType {
  FILESYSTEM
  S3
}
