// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Album {
  id                    String   @id @default(cuid())
  path                  String   @unique // filesystem path
  slug                  String   // URL-friendly slug (unique within parent context)
  name                  String
  description           String?  // from project.md
  status                Status   @default(PUBLIC) // PUBLIC | PRIVATE
  enabled               Boolean  @default(true)
  syncedToS3            Boolean  @default(false) // All photos uploaded to S3
  localFilesSafeDelete  Boolean  @default(false) // Safe to delete local files
  lastSyncAt            DateTime? // Last successful sync
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  photos                Photo[]

  // Composite unique constraint for path-based uniqueness
  @@unique([path, slug])
  @@map("albums")
}

model Photo {
  id           String      @id @default(cuid())
  albumId      String
  filename     String
  originalPath String
  s3Key        String
  metadata     String?     // EXIF data as JSON string
  fileSize     Int
  takenAt      DateTime?   // from EXIF
  blurhash     String?     // BlurHash for loading placeholder
  createdAt    DateTime    @default(now())
  album        Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  thumbnails   Thumbnail[]

  @@index([albumId])
  @@map("photos")
}

model Thumbnail {
  id      String        @id @default(cuid())
  photoId String
  size    ThumbnailSize
  s3Key   String
  width   Int
  height  Int
  photo   Photo         @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([photoId, size])
  @@index([photoId])
  @@map("thumbnails")
}

model SyncJob {
  id              String    @id @default(cuid())
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  albumProgress   String?   // JSON with per-album progress
  totalAlbums     Int       @default(0)
  completedAlbums Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   // JSON string for error details
  filesProcessed  Int       @default(0)
  filesUploaded   Int       @default(0)
  logs            String?   // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("sync_jobs")
}

model BlurhashJob {
  id              String    @id @default(cuid())
  status          JobStatus @default(PENDING)
  progress        Int       @default(0)
  totalPhotos     Int       @default(0)
  processedPhotos Int       @default(0)
  startedAt       DateTime?
  completedAt     DateTime?
  errors          String?   // JSON string for error details
  logs            String?   // JSON array of detailed log entries
  createdAt       DateTime  @default(now())

  @@map("blurhash_jobs")
}

model ThumbnailJob {
  id                String    @id @default(cuid())
  status            JobStatus @default(PENDING)
  progress          Int       @default(0)
  totalPhotos       Int       @default(0)
  processedPhotos   Int       @default(0)
  thumbnailsCreated Int       @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  errors            String?   // JSON string for error details
  logs              String?   // JSON array of detailed log entries
  createdAt         DateTime  @default(now())

  @@map("thumbnail_jobs")
}

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

enum Status {
  PUBLIC
  PRIVATE
}

enum ThumbnailSize {
  SMALL  // 300px grid thumbnails
  MEDIUM // 800px preview
  LARGE  // 1200px lightbox
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
