version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lumina-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for queues and caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - lumina-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        DATABASE_URL: ${DATABASE_URL}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        NEXTAUTH_URL: ${NEXTAUTH_URL}
    image: lumina-app:latest
    env_file:
      - .env
    ports:
      - "4567:3000"
    networks:
      - lumina-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./temp:/app/temp
      - ${PHOTOS_DATA:-photos_data}:/var/app/photos
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker service (consolidated)
  worker:
    image: lumina-app:latest
    command: npm run worker:all
    env_file:
      - .env
    networks:
      - lumina-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    volumes:
      - ./temp:/app/temp
      - ${PHOTOS_DATA:-photos_data}:/var/app/photos
    restart: unless-stopped
    deploy:
      replicas: 1

  bull-dash:
    image: lumina-app:latest
    command: node scripts/bull-dash.js
    env_file:
      - .env
    ports:
      - "4568:3001"
    networks:
      - lumina-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/admin/queues"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  lumina-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  photos_data: